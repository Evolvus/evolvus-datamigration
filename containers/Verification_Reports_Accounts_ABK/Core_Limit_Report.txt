 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_cif_group_mapping_report.sql 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_cif_group_mapping_report.sql 
SELECT A.ORGKEY LEG_CIF_ID,C.ORGKEY FIN_CIF_ID,CASE WHEN A.ORGKEY = C.ORGKEY THEN 'TRUE' ELSE 'FALSE' END MATCH_CIF_ID,
GROUPHOUSEHOLDCODE LEG_REPORTING_GROUP_ID,GROUPNAME_NATIVE FIN_REPORTING_GROUP_ID,CASE WHEN GROUPHOUSEHOLDCODE = GROUPNAME_NATIVE THEN 'TRUE' ELSE 'FALSE' END MATCH_REPORTING_GROUP_ID,
GROUPHOUSEHOLDNAME LEG_ENTITY_OR_GROUP_NAME,GROUPNAME FIN_ENTITY_OR_GROUP_NAME,CASE WHEN TRIM(GROUPHOUSEHOLDNAME) = TRIM(GROUPNAME) THEN 'TRUE' ELSE 'FALSE' END MATCH_ENTITY_OR_GROUP_NAME,
A.GROUP_ID LEG_ENTITY_OR_GROUP_ID,C.GROUP_ID FIN_ENTITY_OR_GROUP_ID,CASE WHEN A.GROUP_ID = C.GROUP_ID THEN 'TRUE' ELSE 'FALSE' END MATCH_ENTITY_OR_GROUP_ID,
D.LOCALETEXT LEG_GROUP_TYPE,C.GROUPTYPE FIN_GROUP_TYPE,CASE WHEN D.LOCALETEXT = C.GROUPTYPE THEN 'TRUE' ELSE 'FALSE' END MATCH_GROUP_TYPE  FROM CU9CORP_O_TABLE A
LEFT JOIN GROUP_MASTER_O_TABLE B ON A.GROUP_ID =B.GROUP_ID
LEFT JOIN (SELECT VALUE ,LOCALETEXT FROM CRMUSER.CATEGORIES A,CRMUSER.CATEGORY_LANG B WHERE CATEGORYTYPE ='CIFGROUP_TYPE' AND A.CATEGORYID=B.CATEGORYID AND A.BANK_ID='01') D ON TRIM(GROUP_TYPE) = TRIM(D.VALUE)
LEFT JOIN (SELECT ORGKEY,GROUPNAME_NATIVE,GROUPNAME,GROUP_ID,LOCALETEXT GROUPTYPE FROM CRMUSER.GROUPHOUSEHOLD A
LEFT JOIN CRMUSER.CIFGROUPS B ON A.GROUP_ID=B.GROUPID
LEFT JOIN (SELECT VALUE ,LOCALETEXT FROM CRMUSER.CATEGORIES A,CRMUSER.CATEGORY_LANG B WHERE CATEGORYTYPE ='CIFGROUP_TYPE' AND A.CATEGORYID=B.CATEGORYID AND A.BANK_ID='01') C ON TRIM(GROUPTYPE) = TRIM(C.VALUE)
WHERE A.BANK_ID='01' AND B.BANK_ID='01') C ON A.ORGKEY =  C.ORGKEY AND A.GROUP_ID = C.GROUP_ID 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_entity_group_mapping_report.sql 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_entity_group_mapping_report.sql 
select ENTITY_ID LEG_ENTITY_ID,CHILDGROUPCODE FIN_ENTITY_ID, CASE WHEN  ENTITY_ID=CHILDGROUPCODE THEN 'TRUE' ELSE 'FALSE' END MATCH_ENTITY_ID,
ENTITY_NAME LEG_ENTITY_NAME,CHILDGROUPNAME FIN_ENTITY_NAME, CASE WHEN ENTITY_NAME=CHILDGROUPNAME THEN 'TRUE' ELSE 'FALSE' END MATCH_ENTITY_NAME,
GROUP_ID LEG_GROUP_ID,PARENTGROUPCODE FIN_GROUP_ID, CASE WHEN GROUP_ID = PARENTGROUPCODE THEN 'TRUE' ELSE 'FALSE' END MATCH_GROUP_ID,
GROUP_NAME LEG_GROUP_NAME,PARENTGROUPNAME FIN_GROUP_NAME, CASE WHEN GROUP_NAME=PARENTGROUPNAME THEN 'TRUE' ELSE 'FALSE' END MATCH_GROUP_NAME
from LIMIT_ENTITY_AND_GROUP_MAP a
left join CRMUSER.GROUPMAPPING b on a.ENTITY_ID = b.CHILDGROUPCODE and a.GROUP_ID = b.PARENTGROUPCODE; 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_linkage_report.sql 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_linkage_report.sql 
DROP TABLE limit_link_to_acct_report;

CREATE TABLE limit_link_to_acct_report AS
SELECT  DISTINCT HMLC LEG_LIMIT_LINE,LOT.LIMIT_PREFIX,FIN_LIMIT_LINK.LIMIT_PREFIX FIN_LIMIT_PREFIX,CASE WHEN LOT.LIMIT_PREFIX = FIN_LIMIT_LINK.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,
LOT.LIMIT_SUFFIX LEG_LIMIT_SUFFIX,FIN_LIMIT_LINK.LIMIT_SUFFIX FIN_LIMIT_SUFFIX,CASE WHEN LOT.LIMIT_SUFFIX = FIN_LIMIT_LINK.LIMIT_SUFFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_SUFFIX,
HM.HMCCY LIMIT_CCY,FIN_LIMIT_LINK.CRNCY_CODE ,CASE WHEN HM.HMCCY = FIN_LIMIT_LINK.CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_CURRENCY,
LOT.SANCTION_LIMIT LEG_SANCTION_LIMIT,FIN_LIMIT_LINK.SANCT_LIM FIN_SANCTION_LIMIT,CASE WHEN LOT.SANCTION_LIMIT = FIN_LIMIT_LINK.SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_SANCTION_LIMIT,
HNAMT LEG_UTILIZATION_AMOUNT,
map_Acc.fin_Acc_num LEG_ACCT_NUM,FIN_LIMIT_LINK.FORACID FIN_ACCT_NUMBER,CASE WHEN map_Acc.fin_Acc_num = FIN_LIMIT_LINK.FORACID THEN 'TRUE' ELSE 'FALSE' END MATCH_ACCT_NUMBER
  FROM LIMIT_CORE_o_TABLE LOT
  left join (select LIMIT_LINE,CASE WHEN TRIM(LM.level_7) IS NOT NULL THEN TRIM(LM.level_7)
            WHEN TRIM(LM.level_7) IS NULL AND TRIM(LM.level_6) IS NOT NULL THEN TRIM(LM.level_6)
            WHEN TRIM(LM.level_7) IS NULL AND TRIM(LM.level_6) IS NULL AND TRIM(LM.level_5) IS NOT NULL THEN TRIM(LM.level_5)
            WHEN TRIM(LM.level_7) IS NULL AND TRIM(LM.level_6) IS NULL AND TRIM(LM.level_5) IS NULL AND TRIM(LM.level_4) IS NOT NULL THEN TRIM(LM.level_4) END limit_node from limit_mapping lm) LM on trim(LM.limit_node)=trim(LOT.limit_suffix)
left join map_cif on  trim(map_cif.FIN_CIF_ID)=trim(LOT.BORROWER_NAME)       
  INNER JOIN HMPF HM ON ((NVL (trim(HM.HMCLC), ' ')  = NVL (trim(map_cif.GFCLC ), ' ')  and trim(HM.HMCUS) = trim(map_cif.GFCUS) ) or trim(LOT.BORROWER_NAME) = trim(HM.HMGRP)) AND trim(LM.LIMIT_LINE) like '%'||trim(HM.HMLC)||'%'
INNER JOIN HNPF HN ON trim(HM.HMSEQ)=trim(HN.HNSEQ)
LEFT JOIN C8PF C8 ON C8.C8CCY = HM.HMCCY
LEFT JOIN (select * from MAP_ACC where schm_type<>'OOO')map_Acc on LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS=trim(HN.HNAB)||trim(HN.HNAN)||trim(HN.HNAS)
LEFT JOIN 
(select DISTINCT LLT.SANCT_LIM,LLT.LIM_SANCT_DATE,LLT.ORIG_LIM_EXP_DATE,LLT.CUST_ID,LLT.LIMIT_PREFIX,LLT.LIMIT_SUFFIX,GAM.FORACID,LLT.CRNCY_CODE,llt.BANK_ID
from tbaadm.llt
inner join tbaadm.dht on dht.LIMIT_B2KID = llt.LIMIT_B2KID and llt.bank_id=GET_PARAM('BANK_ID') and dht.bank_id=GET_PARAM('BANK_ID')
INNER JOIN TBAADM.GAM ON GAM.ACID=DHT.ACID) FIN_LIMIT_LINK ON FIN_LIMIT_LINK.LIMIT_PREFIX = LOT.LIMIT_PREFIX 
AND FIN_LIMIT_LINK.LIMIT_SUFFIX = LOT.LIMIT_SUFFIX
--AND LOT.CRNCY_CODE = FIN_LIMIT_LINK.CRNCY_CODE
 AND map_Acc.fin_Acc_num = FIN_LIMIT_LINK.FORACID 
WHERE map_Acc.fin_Acc_num IS NOT NULL;






select DISTINCT a.LIMIT_PREFIX LEG_LIMIT_PREFIX,FIN_LIMIT_LINK.LIMIT_PREFIX FIN_LIMIT_PREFIX,CASE WHEN  A.LIMIT_PREFIX = FIN_LIMIT_LINK.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,
a.LIMIT_SUFFIX LEG_LIMIT_SUFFIX,FIN_LIMIT_LINK.LIMIT_SUFFIX FIN_LIMIT_SUFFIX,CASE WHEN  a.LIMIT_SUFFIX = FIN_LIMIT_LINK.LIMIT_SUFFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_SUFFIX,
LIMIT_AMOUNT LEG_LIMIT_AMOUNT,SANCT_LIM FIN_LIMIT_AMOUNT,CASE WHEN  LIMIT_AMOUNT  = SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_AMOUNT,
abs(SCBAL/c8pwd) leg_limit_utilisation,abs(SCBAL/c8pwd)*c8lsar leg_utilisation_AMOUNT_equ_kwd,fin_utilisation_AMOUNT fin_utilisation_AMOUNT_equ_kwd ,
CASE WHEN  round(abs(SCBAL/c8pwd)*c8lsar)  = round(fin_utilisation_AMOUNT)  THEN 'TRUE' ELSE 'FALSE' END MATCH_utilisation_AMOUNT,
 case when SCBAL <0 then 'DR' else 'CR' end DR_CR_ACCOUNT_BAL,
LIMIT_CCY LEG_LIMIT_CCY,CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN  LIMIT_CCY  = CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_CCY,
ACCT_NUM LEG_ACCT_NUM,FORACID FIN_ACCT_NUM,CASE WHEN  ACCT_NUM  = FORACID THEN 'TRUE' ELSE 'FALSE' END MATCH_ACCT_NUM
 from LIMIT_LINKAGE_TO_ACCT_O_TABLE A
LEFT JOIN MAP_ACC  ON A.ACCT_NUM = FIN_ACC_NUM
left join scpf on scab||scan||SCAS = LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS
left join c8pf on  trim(C8CCY) = trim(SCCCY)
LEFT JOIN
(select DISTINCT LLT.SANCT_LIM,LLT.LIM_SANCT_DATE,LLT.ORIG_LIM_EXP_DATE,LLT.CUST_ID,LLT.LIMIT_PREFIX,LLT.LIMIT_SUFFIX,GAM.FORACID,LLT.CRNCY_CODE,llt.BANK_ID,UTIL_LIMIT_FUND_BASED,LIAB,LC_SINGLE_TRAN_FLG,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end)*c8lsar fin_utilisation_AMOUNT
from tbaadm.llt
left join c8pf on LLT.CRNCY_CODE = c8ccy
inner join (select a.* from tbaadm.dht a
inner join (select ACID,max(SERIAL_NUM) SERIAL_NUM from tbaadm.dht group by ACID) b on a.ACID = b.ACID and a.SERIAL_NUM = b.SERIAL_NUM) dht on dht.LIMIT_B2KID = llt.LIMIT_B2KID and llt.bank_id=GET_PARAM('BANK_ID') and dht.bank_id=GET_PARAM('BANK_ID')
INNER JOIN TBAADM.GAM ON GAM.ACID=DHT.ACID) FIN_LIMIT_LINK ON TRIM(FIN_LIMIT_LINK.LIMIT_PREFIX) = TRIM(A.LIMIT_PREFIX) 
AND TRIM(FIN_LIMIT_LINK.LIMIT_SUFFIX) = TRIM(A.LIMIT_SUFFIX)
AND TRIM(A.ACCT_NUM) = TRIM(FIN_LIMIT_LINK.FORACID) 




select DISTINCT a.LIMIT_PREFIX LEG_LIMIT_PREFIX,FIN_LIMIT_LINK.LIMIT_PREFIX FIN_LIMIT_PREFIX,CASE WHEN  A.LIMIT_PREFIX = FIN_LIMIT_LINK.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,
a.LIMIT_SUFFIX LEG_LIMIT_SUFFIX,FIN_LIMIT_LINK.LIMIT_SUFFIX FIN_LIMIT_SUFFIX,CASE WHEN  a.LIMIT_SUFFIX = FIN_LIMIT_LINK.LIMIT_SUFFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_SUFFIX,
LIMIT_AMOUNT LEG_LIMIT_AMOUNT,SANCT_LIM FIN_LIMIT_AMOUNT,CASE WHEN  LIMIT_AMOUNT  = SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_AMOUNT,
ABS((SCBAL+scsuma)/c8pwd) leg_limit_utilisation,ABS(((SCBAL+scsuma)/c8pwd)*c8lsar) leg_utilisation_AMOUNT_equ_KWD,ABS(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN clr_bal_amt+future_bal_amt ELSE fin_utilisation_AMOUNT END) fin_utilisation_AMOUNT_equ_KWD ,
CASE WHEN  ABS(round(((SCBAL+scsuma)/c8pwd)*c8lsar))  = ABS(round(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN clr_bal_amt+future_bal_amt ELSE fin_utilisation_AMOUNT END))  THEN 'TRUE' ELSE 'FALSE' END MATCH_utilisation_AMOUNT,
 case when (SCBAL+scsuma) <0 then 'DR' else 'CR' end DR_CR_ACCOUNT_BAL,
LIMIT_CCY LEG_LIMIT_CCY,CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN  LIMIT_CCY  = CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_CCY,
LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS LEG_ACCT_NUM,FORACID FIN_ACCT_NUM,CASE WHEN  ACCT_NUM  = FORACID THEN 'TRUE' ELSE 'FALSE' END MATCH_ACCT_NUM
 from LIMIT_LINKAGE_TO_ACCT_O_TABLE A
 left join (select DISTINCT LIMIT_SUFFIX_CODE LIMIT_SUFFIX from LIMIT_SUFFIX_CODE_AND_DESC where upper(LIMIT_SUFFIX_DESC) like '%LOA%' OR upper(LIMIT_SUFFIX_DESC) like '%OD%') LND on a.LIMIT_SUFFIX = LND.LIMIT_SUFFIX
LEFT JOIN MAP_ACC  ON A.ACCT_NUM = FIN_ACC_NUM
left join scpf on scab||scan||SCAS = LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS
left join c8pf on  trim(C8CCY) = trim(SCCCY)
LEFT JOIN
(select DISTINCT LLT.SANCT_LIM,LLT.LIM_SANCT_DATE,LLT.ORIG_LIM_EXP_DATE,LLT.CUST_ID,LLT.LIMIT_PREFIX,LLT.LIMIT_SUFFIX,GAM.FORACID,LLT.CRNCY_CODE,llt.BANK_ID,UTIL_LIMIT_FUND_BASED,LIAB,LC_SINGLE_TRAN_FLG,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end)*c8lsar fin_utilisation_AMOUNT,gam.clr_bal_amt,gam.future_bal_amt
from tbaadm.llt
left join c8pf on LLT.CRNCY_CODE = c8ccy
inner join (select a.* from tbaadm.dht a
inner join (select ACID,max(SERIAL_NUM) SERIAL_NUM from tbaadm.dht group by ACID) b on a.ACID = b.ACID and a.SERIAL_NUM = b.SERIAL_NUM) dht on dht.LIMIT_B2KID = llt.LIMIT_B2KID and llt.bank_id=GET_PARAM('BANK_ID') and dht.bank_id=GET_PARAM('BANK_ID')
INNER JOIN TBAADM.GAM ON GAM.ACID=DHT.ACID) FIN_LIMIT_LINK ON TRIM(FIN_LIMIT_LINK.LIMIT_PREFIX) = TRIM(A.LIMIT_PREFIX) 
AND TRIM(FIN_LIMIT_LINK.LIMIT_SUFFIX) = TRIM(A.LIMIT_SUFFIX)
AND TRIM(A.ACCT_NUM) = TRIM(FIN_LIMIT_LINK.FORACID) 





select DISTINCT a.LIMIT_PREFIX LEG_LIMIT_PREFIX,FIN_LIMIT_LINK.LIMIT_PREFIX FIN_LIMIT_PREFIX,CASE WHEN  A.LIMIT_PREFIX = FIN_LIMIT_LINK.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,
a.LIMIT_SUFFIX LEG_LIMIT_SUFFIX,FIN_LIMIT_LINK.LIMIT_SUFFIX FIN_LIMIT_SUFFIX,CASE WHEN  a.LIMIT_SUFFIX = FIN_LIMIT_LINK.LIMIT_SUFFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_SUFFIX,
LIMIT_AMOUNT LEG_LIMIT_AMOUNT,SANCT_LIM FIN_LIMIT_AMOUNT,CASE WHEN  LIMIT_AMOUNT  = SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_AMOUNT,
ABS((SCBAL+scsuma)/c8pwd) leg_fcy_limit_utilisation,ABS(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (clr_bal_amt+future_bal_amt) ELSE fin_FCY_utilisation_AMOUNT END) fin_fcy_limit_utilisation,
ABS(((SCBAL+scsuma)/c8pwd)*c8lsar) leg_utilisation_AMOUNT_equ_KWD,ABS(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt+KWD_future_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END) fin_utilisation_AMOUNT_equ_KWD ,
CASE WHEN  ABS(((SCBAL+scsuma)/c8pwd)*c8lsar)   = ABS(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt+KWD_future_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END)  THEN 'TRUE' ELSE 'FALSE' END MATCH_utilisation_AMOUNT,
 case when (SCBAL+scsuma) <0 then 'DR' else 'CR' end DR_CR_ACCOUNT_BAL,
LIMIT_CCY LEG_LIMIT_CCY,CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN  LIMIT_CCY  = CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_CCY,
LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS LEG_ACCT_NUM,FORACID FIN_ACCT_NUM,CASE WHEN  ACCT_NUM  = FORACID THEN 'TRUE' ELSE 'FALSE' END MATCH_ACCT_NUM,
abs(sum(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt+KWD_future_bal_amt)*c8lsar ELSE fin_KWD_utilisation_AMOUNT*c8lsar END) over( order by LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS )  ) group_fin_amount
 from LIMIT_LINKAGE_TO_ACCT_O_TABLE A
 left join (select DISTINCT LIMIT_SUFFIX_CODE LIMIT_SUFFIX from LIMIT_SUFFIX_CODE_AND_DESC where upper(LIMIT_SUFFIX_DESC) like '%LOA%' OR upper(LIMIT_SUFFIX_DESC) like '%OD%') LND on a.LIMIT_SUFFIX = LND.LIMIT_SUFFIX
LEFT JOIN MAP_ACC  ON A.ACCT_NUM = FIN_ACC_NUM
left join scpf on scab||scan||SCAS = LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS
left join c8pf on  trim(C8CCY) = trim(SCCCY)
LEFT JOIN
(select DISTINCT LLT.SANCT_LIM,LLT.LIM_SANCT_DATE,LLT.ORIG_LIM_EXP_DATE,LLT.CUST_ID,LLT.LIMIT_PREFIX,LLT.LIMIT_SUFFIX,GAM.FORACID,LLT.CRNCY_CODE,llt.BANK_ID,UTIL_LIMIT_FUND_BASED,LIAB,LC_SINGLE_TRAN_FLG,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end) fin_fcy_utilisation_AMOUNT,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end)*c81.c8lsar fin_KWD_utilisation_AMOUNT,
gam.clr_bal_amt,gam.clr_bal_amt*c82.c8lsar KWD_clr_bal_amt, gam.future_bal_amt,gam.future_bal_amt*c82.c8lsar KWD_future_bal_amt
from tbaadm.llt
left join c8pf c81 on LLT.CRNCY_CODE = c81.c8ccy
inner join (select a.* from tbaadm.dht a
inner join (select ACID,max(SERIAL_NUM) SERIAL_NUM from tbaadm.dht group by ACID) b on a.ACID = b.ACID and a.SERIAL_NUM = b.SERIAL_NUM) dht on dht.LIMIT_B2KID = llt.LIMIT_B2KID and llt.bank_id=GET_PARAM('BANK_ID') and dht.bank_id=GET_PARAM('BANK_ID')
INNER JOIN TBAADM.GAM ON GAM.ACID=DHT.ACID
left join c8pf c82 on acct_crncy_code = c82.c8ccy) FIN_LIMIT_LINK ON TRIM(FIN_LIMIT_LINK.LIMIT_PREFIX) = TRIM(A.LIMIT_PREFIX) 
AND TRIM(FIN_LIMIT_LINK.LIMIT_SUFFIX) = TRIM(A.LIMIT_SUFFIX)
AND TRIM(A.ACCT_NUM) = TRIM(FIN_LIMIT_LINK.FORACID)







drop table limit_core_linkage_report

create table limit_core_linkage_report as
select DISTINCT a.LIMIT_PREFIX LEG_LIMIT_PREFIX,FIN_LIMIT_LINK.LIMIT_PREFIX FIN_LIMIT_PREFIX,CASE WHEN  A.LIMIT_PREFIX = FIN_LIMIT_LINK.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,
a.LIMIT_SUFFIX LEG_LIMIT_SUFFIX,FIN_LIMIT_LINK.LIMIT_SUFFIX FIN_LIMIT_SUFFIX,CASE WHEN  a.LIMIT_SUFFIX = FIN_LIMIT_LINK.LIMIT_SUFFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_SUFFIX,
LIMIT_AMOUNT LEG_LIMIT_AMOUNT,SANCT_LIM FIN_LIMIT_AMOUNT,CASE WHEN  LIMIT_AMOUNT  = SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_AMOUNT,
((SCBAL+scsuma)/c8pwd) leg_fcy_limit_utilisation,(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (clr_bal_amt+future_bal_amt) ELSE fin_FCY_utilisation_AMOUNT END) fin_fcy_limit_utilisation,
(((SCBAL+scsuma)/c8pwd)*c8lsar) leg_utilisation_AMOUNT_equ_KWD,(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt+KWD_future_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END) fin_utilisation_AMOUNT_equ_KWD ,
(sum((CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt+KWD_future_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END)) over( PARTITION by LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS )  ) group_fin_KWD_amount,
CASE WHEN  ROUND(ABS((((SCBAL+scsuma)/c8pwd)*c8lsar)),3)   = 
ROUND(ABS(sum(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt+KWD_future_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END) over( PARTITION by LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS )),3) THEN 'TRUE' ELSE 'FALSE' END MATCH_utilisation_AMOUNT,
 case when (SCBAL+scsuma) <0 then 'DR' else 'CR' end DR_CR_ACCOUNT_BAL,
LIMIT_CCY LEG_LIMIT_CCY,CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN  LIMIT_CCY  = CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_CCY,
LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS LEG_ACCT_NUM,FORACID FIN_ACCT_NUM,CASE WHEN  ACCT_NUM  = FORACID THEN 'TRUE' ELSE 'FALSE' END MATCH_ACCT_NUM
 from LIMIT_LINKAGE_TO_ACCT_O_TABLE A
 left join (select DISTINCT LIMIT_SUFFIX_CODE LIMIT_SUFFIX from LIMIT_SUFFIX_CODE_AND_DESC where upper(LIMIT_SUFFIX_DESC) like '%LOA%' OR upper(LIMIT_SUFFIX_DESC) like '%OD%') LND on a.LIMIT_SUFFIX = LND.LIMIT_SUFFIX
LEFT JOIN MAP_ACC  ON A.ACCT_NUM = FIN_ACC_NUM
left join scpf on scab||scan||SCAS = LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS
left join c8pf on  trim(C8CCY) = trim(SCCCY)
LEFT JOIN
(select DISTINCT LLT.SANCT_LIM,LLT.LIM_SANCT_DATE,LLT.ORIG_LIM_EXP_DATE,LLT.CUST_ID,LLT.LIMIT_PREFIX,LLT.LIMIT_SUFFIX,GAM.FORACID,LLT.CRNCY_CODE,llt.BANK_ID,UTIL_LIMIT_FUND_BASED,LIAB,LC_SINGLE_TRAN_FLG,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end) fin_fcy_utilisation_AMOUNT,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end)*c81.c8lsar fin_KWD_utilisation_AMOUNT,
gam.clr_bal_amt,gam.clr_bal_amt*c82.c8lsar KWD_clr_bal_amt, gam.future_bal_amt,gam.future_bal_amt*c82.c8lsar KWD_future_bal_amt
from tbaadm.llt
left join c8pf c81 on LLT.CRNCY_CODE = c81.c8ccy
inner join (select a.* from tbaadm.dht a
inner join (select ACID,max(SERIAL_NUM) SERIAL_NUM from tbaadm.dht group by ACID) b on a.ACID = b.ACID and a.SERIAL_NUM = b.SERIAL_NUM) dht on dht.LIMIT_B2KID = llt.LIMIT_B2KID and llt.bank_id=GET_PARAM('BANK_ID') and dht.bank_id=GET_PARAM('BANK_ID')
INNER JOIN TBAADM.GAM ON GAM.ACID=DHT.ACID
left join c8pf c82 on acct_crncy_code = c82.c8ccy) FIN_LIMIT_LINK ON TRIM(FIN_LIMIT_LINK.LIMIT_PREFIX) = TRIM(A.LIMIT_PREFIX) 
AND TRIM(FIN_LIMIT_LINK.LIMIT_SUFFIX) = TRIM(A.LIMIT_SUFFIX)
AND TRIM(A.ACCT_NUM) = TRIM(FIN_LIMIT_LINK.FORACID)


select DISTINCT a.LIMIT_PREFIX LEG_LIMIT_PREFIX,FIN_LIMIT_LINK.LIMIT_PREFIX FIN_LIMIT_PREFIX,CASE WHEN  A.LIMIT_PREFIX = FIN_LIMIT_LINK.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,
a.LIMIT_SUFFIX LEG_LIMIT_SUFFIX,FIN_LIMIT_LINK.LIMIT_SUFFIX FIN_LIMIT_SUFFIX,CASE WHEN  a.LIMIT_SUFFIX = FIN_LIMIT_LINK.LIMIT_SUFFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_SUFFIX,
LIMIT_AMOUNT LEG_LIMIT_AMOUNT,SANCT_LIM FIN_LIMIT_AMOUNT,CASE WHEN  LIMIT_AMOUNT  = SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_AMOUNT,
((SCBAL+scsuma)/c8pwd) leg_fcy_limit_utilisation,(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (clr_bal_amt+future_bal_amt) ELSE fin_FCY_utilisation_AMOUNT END) fin_fcy_limit_utilisation,
(((SCBAL+scsuma)/c8pwd)*c8lsar) leg_utilisation_AMOUNT_equ_KWD,(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt+KWD_future_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END) fin_utilisation_AMOUNT_equ_KWD ,
(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (((SCBAL+scsuma)/c8pwd)*c8lsar) ELSE sum((((SCBAL+scsuma)/c8pwd)*c8lsar)) over(partition by a.LIMIT_PREFIX||a.LIMIT_SUFFIX ) END) group_leg_KWD_amount,
(sum((CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt+KWD_future_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END)) over( PARTITION by LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS )  ) group_fin_KWD_amount,
CASE WHEN abs(round( (CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (((SCBAL+scsuma)/c8pwd)*c8lsar) ELSE sum((((SCBAL+scsuma)/c8pwd)*c8lsar)) over(partition by a.LIMIT_PREFIX||a.LIMIT_SUFFIX ) END),3))   = 
abs(ROUND((sum(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt+KWD_future_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END) over( PARTITION by LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS )),3)) THEN 'TRUE' ELSE 'FALSE' END MATCH_utilisation_AMOUNT,
 case when (SCBAL+scsuma) <0 then 'DR' else 'CR' end DR_CR_ACCOUNT_BAL,
LIMIT_CCY LEG_LIMIT_CCY,CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN  LIMIT_CCY  = CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_CCY,
LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS leg_internal_acc_num,
ACCT_NUM mapped_ACCT_NUM,FORACID FIN_ACCT_NUM,CASE WHEN  ACCT_NUM  = FORACID THEN 'TRUE' ELSE 'FALSE' END MATCH_ACCT_NUM
 from LIMIT_LINKAGE_TO_ACCT_O_TABLE A
 left join (select DISTINCT LIMIT_SUFFIX_CODE LIMIT_SUFFIX from LIMIT_SUFFIX_CODE_AND_DESC where upper(LIMIT_SUFFIX_DESC) like '%LOA%' OR upper(LIMIT_SUFFIX_DESC) like '%OD%') LND on a.LIMIT_SUFFIX = LND.LIMIT_SUFFIX
LEFT JOIN MAP_ACC  ON A.ACCT_NUM = FIN_ACC_NUM
left join scpf on scab||scan||SCAS = LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS
left join c8pf on  trim(C8CCY) = trim(SCCCY)
LEFT JOIN
(select DISTINCT LLT.SANCT_LIM,LLT.LIM_SANCT_DATE,LLT.ORIG_LIM_EXP_DATE,LLT.CUST_ID,LLT.LIMIT_PREFIX,LLT.LIMIT_SUFFIX,GAM.FORACID,LLT.CRNCY_CODE,llt.BANK_ID,UTIL_LIMIT_FUND_BASED,LIAB,LC_SINGLE_TRAN_FLG,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end) fin_fcy_utilisation_AMOUNT,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end)*c81.c8lsar fin_KWD_utilisation_AMOUNT,
gam.clr_bal_amt,gam.clr_bal_amt*c82.c8lsar KWD_clr_bal_amt, gam.future_bal_amt,gam.future_bal_amt*c82.c8lsar KWD_future_bal_amt
from tbaadm.llt
left join c8pf c81 on LLT.CRNCY_CODE = c81.c8ccy
inner join (select a.* from tbaadm.dht a
inner join (select ACID,max(SERIAL_NUM) SERIAL_NUM from tbaadm.dht group by ACID) b on a.ACID = b.ACID and a.SERIAL_NUM = b.SERIAL_NUM) dht on dht.LIMIT_B2KID = llt.LIMIT_B2KID and llt.bank_id=GET_PARAM('BANK_ID') and dht.bank_id=GET_PARAM('BANK_ID')
INNER JOIN TBAADM.GAM ON GAM.ACID=DHT.ACID
left join c8pf c82 on acct_crncy_code = c82.c8ccy) FIN_LIMIT_LINK ON TRIM(FIN_LIMIT_LINK.LIMIT_PREFIX) = TRIM(A.LIMIT_PREFIX) 
AND TRIM(FIN_LIMIT_LINK.LIMIT_SUFFIX) = TRIM(A.LIMIT_SUFFIX)
AND TRIM(A.ACCT_NUM) = TRIM(FIN_LIMIT_LINK.FORACID)




select DISTINCT a.LIMIT_PREFIX LEG_LIMIT_PREFIX,FIN_LIMIT_LINK.LIMIT_PREFIX FIN_LIMIT_PREFIX,CASE WHEN  A.LIMIT_PREFIX = FIN_LIMIT_LINK.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,
a.LIMIT_SUFFIX LEG_LIMIT_SUFFIX,FIN_LIMIT_LINK.LIMIT_SUFFIX FIN_LIMIT_SUFFIX,CASE WHEN  a.LIMIT_SUFFIX = FIN_LIMIT_LINK.LIMIT_SUFFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_SUFFIX,
LIMIT_AMOUNT LEG_LIMIT_AMOUNT,SANCT_LIM FIN_LIMIT_AMOUNT,CASE WHEN  LIMIT_AMOUNT  = SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_AMOUNT,
((scbal -(scsum1+scsum2))/c8pwd) leg_fcy_limit_utilisation,(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (clr_bal_amt) ELSE fin_FCY_utilisation_AMOUNT END) fin_fcy_limit_utilisation,
(((scbal -(scsum1+scsum2))/c8pwd)*c8lsar) leg_utilisation_AMOUNT_equ_KWD,(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END) fin_utilisation_AMOUNT_equ_KWD ,
(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (((scbal -(scsum1+scsum2))/c8pwd)*c8lsar) ELSE sum((((scbal -(scsum1+scsum2))/c8pwd)*c8lsar)) over(partition by a.LIMIT_PREFIX||a.LIMIT_SUFFIX ) END) group_leg_KWD_amount,
(sum((CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END)) over( PARTITION by LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS )  ) group_fin_KWD_amount,
CASE WHEN abs(round( (CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (((scbal -(scsum1+scsum2))/c8pwd)*c8lsar) ELSE sum((((scbal -(scsum1+scsum2))/c8pwd)*c8lsar)) over(partition by a.LIMIT_PREFIX||a.LIMIT_SUFFIX ) END),3))   = 
abs(ROUND((sum(CASE WHEN LND.LIMIT_SUFFIX IS NOT NULL THEN (KWD_clr_bal_amt) ELSE fin_KWD_utilisation_AMOUNT END) over( PARTITION by LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS )),3)) THEN 'TRUE' ELSE 'FALSE' END MATCH_utilisation_AMOUNT,
 case when (scbal -(scsum1+scsum2)) <0 then 'DR' else 'CR' end DR_CR_ACCOUNT_BAL,
LIMIT_CCY LEG_LIMIT_CCY,CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN  LIMIT_CCY  = CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_CCY,
LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS leg_internal_acc_num,
ACCT_NUM mapped_ACCT_NUM,FORACID FIN_ACCT_NUM,CASE WHEN  ACCT_NUM  = FORACID THEN 'TRUE' ELSE 'FALSE' END MATCH_ACCT_NUM
 from LIMIT_LINKAGE_TO_ACCT_O_TABLE A
 left join (select DISTINCT LIMIT_SUFFIX_CODE LIMIT_SUFFIX from LIMIT_SUFFIX_CODE_AND_DESC where upper(LIMIT_SUFFIX_DESC) like '%LOA%' OR upper(LIMIT_SUFFIX_DESC) like '%OD%') LND on a.LIMIT_SUFFIX = LND.LIMIT_SUFFIX
LEFT JOIN MAP_ACC  ON A.ACCT_NUM = FIN_ACC_NUM
left join scpf on scab||scan||SCAS = LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS
left join c8pf on  trim(C8CCY) = trim(SCCCY)
LEFT JOIN
(select DISTINCT LLT.SANCT_LIM,LLT.LIM_SANCT_DATE,LLT.ORIG_LIM_EXP_DATE,LLT.CUST_ID,LLT.LIMIT_PREFIX,LLT.LIMIT_SUFFIX,GAM.FORACID,LLT.CRNCY_CODE,llt.BANK_ID,UTIL_LIMIT_FUND_BASED,LIAB,LC_SINGLE_TRAN_FLG,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end) fin_fcy_utilisation_AMOUNT,
(case when LC_SINGLE_TRAN_FLG='N' then LIAB else UTIL_LIMIT_FUND_BASED end)*c81.c8lsar fin_KWD_utilisation_AMOUNT,
gam.clr_bal_amt,gam.clr_bal_amt*c82.c8lsar KWD_clr_bal_amt, gam.future_bal_amt,gam.future_bal_amt*c82.c8lsar KWD_future_bal_amt
from tbaadm.llt
left join c8pf c81 on LLT.CRNCY_CODE = c81.c8ccy
inner join (select a.* from tbaadm.dht a
inner join (select ACID,max(SERIAL_NUM) SERIAL_NUM from tbaadm.dht group by ACID) b on a.ACID = b.ACID and a.SERIAL_NUM = b.SERIAL_NUM) dht on dht.LIMIT_B2KID = llt.LIMIT_B2KID and llt.bank_id=GET_PARAM('BANK_ID') and dht.bank_id=GET_PARAM('BANK_ID')
INNER JOIN TBAADM.GAM ON GAM.ACID=DHT.ACID
left join c8pf c82 on acct_crncy_code = c82.c8ccy) FIN_LIMIT_LINK ON TRIM(FIN_LIMIT_LINK.LIMIT_PREFIX) = TRIM(A.LIMIT_PREFIX) 
AND TRIM(FIN_LIMIT_LINK.LIMIT_SUFFIX) = TRIM(A.LIMIT_SUFFIX)
AND TRIM(A.ACCT_NUM) = TRIM(FIN_LIMIT_LINK.FORACID) 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_notes_report.sql 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_notes_report.sql 
SELECT distinct a.LIMIT_PREFIX LEG_LIMIT_PREFIX,b.LIMIT_PREFIX FIN_LIMIT_PREFIX,CASE WHEN a.LIMIT_PREFIX = b.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,
 NOTE1||NOTE2||NOTE3 LEG_LIMIT_NOTES ,NOTES FIN_LIMIT_NOTES,CASE WHEN TRIM(NOTE1||NOTE2||NOTE3) = TRIM(NOTES) THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_NOTES FROM LIMIT_CORE_NOTES_O_TABLE a
left join CUSTOM.C_LLT_NOTES b on trim(a.LIMIT_PREFIX) = trim(b.LIMIT_PREFIX); 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_report.sql 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
core_limit_report.sql 


--Corporate limit report


SELECT distinct LO.LIMIT_PREFIX LEG_CIF_ID ,LLT.LIMIT_PREFIX FIN_CIF_ID,CASE WHEN LO.LIMIT_PREFIX =LLT.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,gm.GROUP_NAME,
LO.limit_suffix LEG_limit_suffix ,LLT.limit_suffix fin_limit_suffix,CASE WHEN LO.limit_suffix =LLT.limit_suffix THEN 'TRUE' ELSE 'FALSE' END MATCH_limit_suffix,
LO.LIMIT_DESC LEG_LIMIT_DESC,LLT.LIMIT_DESC FIN_LIMIT_DESC,CASE WHEN LO.LIMIT_DESC =LLT.LIMIT_DESC THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_DESC,
PARENT_LIMIT_PREFIX,PARENT_LIMIT_SUFFIX,PLD.LIMIT_SUFFIX_DESC PARENT_LIMIT_SUFFIX_DESC,  gmp.GROUP_NAME parent_GROUP_NAME,
LO.CRNCY_CODE LEG_CRNCY_CODE ,LLT.CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN LO.CRNCY_CODE =LLT.CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_CRNCY_CODE,
SANCTION_LIMIT LEG_SANCTION_LIMIT,SANCT_LIM FIN_SANCTION_LIMIT ,CASE WHEN LO.SANCTION_LIMIT =LLT.SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_SANCT_LIM,
to_date(LO.LIMIT_APPROVAL_DATE,'dd-mm-yyyy') LEG_LIMIT_APPROVAL_DATE ,LIM_SANCT_DATE FIN_LIMIT_APPROVAL_DATE,CASE WHEN to_date(LO.LIMIT_APPROVAL_DATE,'dd-mm-yyyy') =LLT.LIM_SANCT_DATE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_APPROVAL_DATE,
to_date(LO.LIMIT_EXPIRY_DATE,'dd-mm-yyyy') LEG_LIMIT_EXPIRY_DATE ,LIM_EXP_DATE FIN_LIMIT_EXPIRY_DATE,CASE WHEN to_date(LO.LIMIT_EXPIRY_DATE,'dd-mm-yyyy') =LLT.LIM_EXP_DATE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIM_EXP_DATE,
commit_data.EXPIRY_DATE commitment_EXPIRY_DATE,llt.AVAILABILITY_END_DATE fin_AVAILABILITY_END_DATE,CASE WHEN nvl(commit_data.EXPIRY_DATE,sysdate) =nvl(llt.AVAILABILITY_END_DATE,sysdate) THEN 'TRUE' ELSE 'FALSE' END MATCH_commitment_EXPIRY_DATE,
LO.LIMIT_TYPE LEG_LIMIT_TYPE,LLT.LIMIT_TYPE FIN_LIMIT_TYPE, CASE WHEN nvl(LO.LIMIT_TYPE,' ') =nvl(LLT.LIMIT_TYPE,' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_TYPE,
LIAB FIN_LIABILITY,
CONTINGENT_LIAB FIN_CONTINGENT_LIABILITY,
trim(NOTES) LEG_COMMITMENT_REF,TRIM(FREE_TEXT) FIN_COMMITMENT_REF,CASE WHEN nvl(trim(NOTES) ,' ') =nvl(TRIM(FREE_TEXT),' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_COMMITMENT_REF,
trim(PURPOSE_OF_LIMIT) LEG_PURPOSE_CODE,case when trim(PURPOSE_OF_LIMIT)  is not null then TRIM(LLT.PATTERN_OF_FUNDING) end FIN_PURPOSE_CODE,CASE WHEN nvl(CASE WHEN trim(PURPOSE_OF_LIMIT) IS NOT NULL THEN TRIM(LLT.PATTERN_OF_FUNDING) END,' ') =nvl(TRIM(PURPOSE_OF_LIMIT),' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_PURPOSE_CODE
FROM LIMIT_CORE_o_TABLE LO
left join GROUP_MASTER_O_TABLE gm on gm.GROUP_ID = LO.LIMIT_PREFIX
left join GROUP_MASTER_O_TABLE gmp on gmp.GROUP_ID = LO.PARENT_LIMIT_PREFIX
left JOIN TBAADM.LLT LLT ON LLT.LIMIT_PREFIX = LO.LIMIT_PREFIX AND  LLT.LIMIT_SUFFIX = LO.LIMIT_SUFFIX
left join LIMIT_SUFFIX_CODE_AND_DESC PLD ON TRIM(PLD.LIMIT_SUFFIX_CODE) = TRIM(PARENT_LIMIT_SUFFIX)
left join (select distinct FIN_CIF_ID,EXPIRY_DATE,LIMIT_SUFFIX from COMMITMENT_LIMIT_DATA) commit_data on commit_data.FIN_CIF_ID = LO.LIMIT_PREFIX and commit_data.LIMIT_SUFFIX = LO.limit_suffix
where EXISTS( SELECT 1 FROM(
select DISTINCT TO_CHAR(FIN_CIF_ID) LIMIT_PREFIX from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'
UNION
SELECT DISTINCT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') AND 
LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450')
UNION
SELECT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('2') AND 
LIMIT_PREFIX IN(SELECT PARENT_LIMIT_PREFIX FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') 
AND LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'))
) B WHERE B.LIMIT_PREFIX =  LO.LIMIT_PREFIX
)
order by LO.LIMIT_PREFIX,LO.LIMIT_DESC;


--Bank limit report

SELECT distinct LO.LIMIT_PREFIX LEG_CIF_ID ,LLT.LIMIT_PREFIX FIN_CIF_ID,CASE WHEN LO.LIMIT_PREFIX =LLT.LIMIT_PREFIX THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_PREFIX,gm.REPORTING_GROUP_ID GROUP_NAME,
LO.limit_suffix LEG_limit_suffix ,LLT.limit_suffix fin_limit_suffix,CASE WHEN LO.limit_suffix =LLT.limit_suffix THEN 'TRUE' ELSE 'FALSE' END MATCH_limit_suffix,
LO.LIMIT_DESC LEG_LIMIT_DESC,LLT.LIMIT_DESC FIN_LIMIT_DESC,CASE WHEN LO.LIMIT_DESC =LLT.LIMIT_DESC THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_DESC,
PARENT_LIMIT_PREFIX,PARENT_LIMIT_SUFFIX,PLD.LIMIT_SUFFIX_DESC PARENT_LIMIT_SUFFIX_DESC, gmp.REPORTING_GROUP_ID parent_GROUP_NAME,
LO.CRNCY_CODE LEG_CRNCY_CODE ,LLT.CRNCY_CODE FIN_CRNCY_CODE,CASE WHEN LO.CRNCY_CODE =LLT.CRNCY_CODE THEN 'TRUE' ELSE 'FALSE' END MATCH_CRNCY_CODE,
SANCTION_LIMIT LEG_SANCTION_LIMIT,SANCT_LIM FIN_SANCTION_LIMIT ,CASE WHEN LO.SANCTION_LIMIT =LLT.SANCT_LIM THEN 'TRUE' ELSE 'FALSE' END MATCH_SANCT_LIM,
to_date(LO.LIMIT_APPROVAL_DATE,'dd-mm-yyyy') LEG_LIMIT_APPROVAL_DATE ,LIM_SANCT_DATE FIN_LIMIT_APPROVAL_DATE,CASE WHEN to_date(LO.LIMIT_APPROVAL_DATE,'dd-mm-yyyy') =LLT.LIM_SANCT_DATE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_APPROVAL_DATE,
to_date(LO.LIMIT_EXPIRY_DATE,'dd-mm-yyyy') LEG_LIMIT_EXPIRY_DATE ,LIM_EXP_DATE FIN_LIMIT_EXPIRY_DATE,CASE WHEN to_date(LO.LIMIT_EXPIRY_DATE,'dd-mm-yyyy') =LLT.LIM_EXP_DATE THEN 'TRUE' ELSE 'FALSE' END MATCH_LIM_EXP_DATE,
LO.LIMIT_TYPE LEG_LIMIT_TYPE,LLT.LIMIT_TYPE FIN_LIMIT_TYPE, CASE WHEN nvl(LO.LIMIT_TYPE,' ') =nvl(LLT.LIMIT_TYPE,' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_LIMIT_TYPE,
LIAB FIN_LIABILITY,
CONTINGENT_LIAB FIN_CONTINGENT_LIABILITY,
trim(NOTES) LEG_COMMITMENT_REF,TRIM(FREE_TEXT) FIN_COMMITMENT_REF,CASE WHEN nvl(trim(NOTES) ,' ') =nvl(TRIM(FREE_TEXT),' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_COMMITMENT_REF,
trim(PURPOSE_OF_LIMIT) LEG_PURPOSE_CODE,CASE WHEN trim(PURPOSE_OF_LIMIT) IS NOT NULL THEN TRIM(LLT.PATTERN_OF_FUNDING) END FIN_PURPOSE_CODE,CASE WHEN nvl(CASE WHEN trim(PURPOSE_OF_LIMIT) IS NOT NULL THEN TRIM(LLT.PATTERN_OF_FUNDING) END,' ')=nvl(TRIM(PURPOSE_OF_LIMIT),' ') THEN 'TRUE' ELSE 'FALSE' END MATCH_PURPOSE_CODE
FROM LIMIT_CORE_o_TABLE LO
left join GROUP_MASTER_O_TABLE gm on gm.GROUP_ID = LO.LIMIT_PREFIX
left join GROUP_MASTER_O_TABLE gmp on gmp.GROUP_ID = LO.PARENT_LIMIT_PREFIX
left JOIN TBAADM.LLT LLT ON LLT.LIMIT_PREFIX = LO.LIMIT_PREFIX AND  LLT.LIMIT_SUFFIX = LO.LIMIT_SUFFIX
left join LIMIT_SUFFIX_CODE_AND_DESC PLD ON TRIM(PLD.LIMIT_SUFFIX_CODE) = TRIM(PARENT_LIMIT_SUFFIX)
where NOT EXISTS( SELECT 1 FROM(
select DISTINCT TO_CHAR(FIN_CIF_ID) LIMIT_PREFIX from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'
UNION
SELECT DISTINCT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') AND 
LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450')
UNION
SELECT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('2') AND 
LIMIT_PREFIX IN(SELECT PARENT_LIMIT_PREFIX FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') 
AND LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'))
) B WHERE B.LIMIT_PREFIX =  LO.LIMIT_PREFIX
)
order by LO.LIMIT_PREFIX,LO.LIMIT_DESC; 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
missing_limit_linkage_report.sql 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
missing_limit_linkage_report.sql 
SELECT   HM.HMCLC,HM.HMCUS,LOT.LIMIT_PREFIX fin_customer_num,LOT.LIMIT_SUFFIX,HMLC,
TO_NUMBER(HN.HNAMT)/C8.C8PWD LIMIT_AMOUNT,HM.HMCCY LIMIT_CCY, HN.HNAB,HN.HNAN,HN.HNAS,aftb.SCHEME_TYPE,LOT.LIMIT_EXPIRY_DATE--,HN.HNAMT
  FROM  LIMIT_CORE_o_TABLE LOT
  left join (select LIMIT_LINE,CASE WHEN TRIM(LM.level_7) IS NOT NULL THEN TRIM(LM.level_7)
            WHEN TRIM(LM.level_7) IS NULL AND TRIM(LM.level_6) IS NOT NULL THEN TRIM(LM.level_6)
            WHEN TRIM(LM.level_7) IS NULL AND TRIM(LM.level_6) IS NULL AND TRIM(LM.level_5) IS NOT NULL THEN TRIM(LM.level_5)
            WHEN TRIM(LM.level_7) IS NULL AND TRIM(LM.level_6) IS NULL AND TRIM(LM.level_5) IS NULL AND TRIM(LM.level_4) IS NOT NULL THEN TRIM(LM.level_4) END limit_node from limit_mapping lm) LM on LM.limit_node=LOT.limit_suffix
left join map_cif on  map_cif.FIN_CIF_ID=LOT.BORROWER_NAME       
  INNER JOIN HMPF HM ON (HM.HMCLC||HM.HMCUS = map_cif.GFCLC||map_cif.GFCUS or LOT.BORROWER_NAME = HM.HMGRP) AND LM.LIMIT_LINE=HM.HMLC
INNER JOIN HNPF HN ON HM.HMSEQ=HN.HNSEQ
inner join 
(select HNAB,HNAN,HNAS,max(HNSEQ) HNSEQ from HMPF HM 
INNER JOIN HNPF HN ON HM.HMSEQ=HN.HNSEQ
group by HNAB,HNAN,HNAS) HN1  on  HN1.HNSEQ = HN.HNSEQ
LEFT JOIN C8PF C8 ON C8.C8CCY = HM.HMCCY
LEFT JOIN (select * from MAP_ACC where schm_type<>'OOO')map_Acc on LEG_BRANCH_ID||LEG_SCAN||LEG_SCAS=HN.HNAB||HN.HNAN||HN.HNAS --and map_Acc.fin_Acc_num is not null
left join ALL_FINAL_TRIAL_BALANCE aftb on SCAB||SCAN||SCAS = HN.HNAB||HN.HNAN||HN.HNAS
WHERE  trim(map_Acc.FIN_ACC_NUM) is  null and HN.HNAMT <>0 AND HM.HMLC IS NOT NULL; 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
PREMOCK_REPORT.SQL 
========================================================================================================================================================================================== 
****************************************************************************************************************************************************************************************** 
PREMOCK_REPORT.SQL 
--CORPORATE

SELECT BORROWER_NAME, NODE_LEVEL, LIMIT_PREFIX, LIMIT_SUFFIX,C.GROUP_NAME ENTITY_GROUP_NAME, LIMIT_DESC, CRNCY_CODE, PARENT_LIMIT_PREFIX, PARENT_LIMIT_SUFFIX, B.GROUP_NAME PARENT_ENTITY_GROUP_NAME, 
SANCTION_LIMIT, DRAWING_POWER_IND, LIMIT_APPROVAL_DATE, LIMIT_EXPIRY_DATE, LIMIT_REVIEW_DATE, APPROVAL_AUTH_CODE, APPROVAL_LEVEL,
 LIMIT_APPROVAL_REF, NOTES, TERMS_AND_CONDITIONS, LIMIT_TYPE, LOAN_TYPE, MASTER_LIMIT_NODE, MIN_COLL_VALUE_BASED_ON, DRWNG_POWER_PCNT,
  PATTERN_OF_FUNDING, DEBIT_ACCOUNT_FOR_FEES, COMMITTED_LINES, CONTRACT_SIGN_DATE, UPLOAD_STATUS, COND_PRECEDENT_FLG, GLOBAL_LIMIT_FLG,
   MAIN_PRODUCT_TYPE, PROJECT_NAME, PRODUCT_NAME, PURPOSE_OF_LIMIT, BANK_ID FROM LIMIT_CORE_O_TABLE A
LEFT JOIN GROUP_MASTER_O_TABLE B ON TRIM(A.PARENT_LIMIT_PREFIX)=TRIM(B.GROUP_ID)
LEFT JOIN GROUP_MASTER_O_TABLE C ON TRIM(A.LIMIT_PREFIX)=TRIM(C.GROUP_ID)
WHERE  EXISTS( SELECT 1 FROM(
select DISTINCT TO_CHAR(FIN_CIF_ID) LIMIT_PREFIX from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'
UNION
SELECT DISTINCT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') AND 
LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450')
UNION
SELECT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('2') AND 
LIMIT_PREFIX IN(SELECT PARENT_LIMIT_PREFIX FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') 
AND LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'))
) B WHERE B.LIMIT_PREFIX =  a.LIMIT_PREFIX
);

--BANK
SELECT BORROWER_NAME, NODE_LEVEL, LIMIT_PREFIX, LIMIT_SUFFIX,C.REPORTING_GROUP_ID ENTITY_GROUP_NAME, LIMIT_DESC, CRNCY_CODE, PARENT_LIMIT_PREFIX, PARENT_LIMIT_SUFFIX, B.REPORTING_GROUP_ID PARENT_ENTITY_GROUP_NAME, 
SANCTION_LIMIT, DRAWING_POWER_IND, LIMIT_APPROVAL_DATE, LIMIT_EXPIRY_DATE, LIMIT_REVIEW_DATE, APPROVAL_AUTH_CODE, APPROVAL_LEVEL,
 LIMIT_APPROVAL_REF, NOTES, TERMS_AND_CONDITIONS, LIMIT_TYPE, LOAN_TYPE, MASTER_LIMIT_NODE, MIN_COLL_VALUE_BASED_ON, DRWNG_POWER_PCNT,
  PATTERN_OF_FUNDING, DEBIT_ACCOUNT_FOR_FEES, COMMITTED_LINES, CONTRACT_SIGN_DATE, UPLOAD_STATUS, COND_PRECEDENT_FLG, GLOBAL_LIMIT_FLG,
   MAIN_PRODUCT_TYPE, PROJECT_NAME, PRODUCT_NAME, PURPOSE_OF_LIMIT, BANK_ID FROM LIMIT_CORE_O_TABLE A
LEFT JOIN GROUP_MASTER_O_TABLE B ON TRIM(A.PARENT_LIMIT_PREFIX)=TRIM(B.GROUP_ID)
LEFT JOIN GROUP_MASTER_O_TABLE C ON TRIM(A.LIMIT_PREFIX)=TRIM(C.GROUP_ID)
WHERE not EXISTS( SELECT 1 FROM(
select DISTINCT TO_CHAR(FIN_CIF_ID) LIMIT_PREFIX from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'
UNION
SELECT DISTINCT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') AND 
LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450')
UNION
SELECT TO_CHAR(PARENT_LIMIT_PREFIX) FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('2') AND 
LIMIT_PREFIX IN(SELECT PARENT_LIMIT_PREFIX FROM LIMIT_CORE_O_TABLE WHERE PARENT_LIMIT_PREFIX IS NOT NULL AND NODE_LEVEL IN('3') 
AND LIMIT_PREFIX IN(select DISTINCT FIN_CIF_ID from gfpf INNER JOIN MAP_CIF ON TRIM(MAP_CIF.GFCLC)||TRIM(MAP_CIF.GFCUS) = TRIM(gfpf.GFCLC)||TRIM(gfpf.GFCUS) where (to_number(TRIM(GFACO)) < 300 OR  to_number(TRIM(GFACO)) > 399 OR TRIM(GFACO) IS NULL) and TRIM(GFACO)!='450'))
) B WHERE B.LIMIT_PREFIX =  a.LIMIT_PREFIX
);

--GROUP HOUSE HOLD
select ORGKEY cif_id,GROUPHOUSEHOLDCODE reporting_group_id,GROUPHOUSEHOLDNAME entity_or_group_name,a.GROUP_ID entity_or_group_id,LOCALETEXT GROUP_TYPE  from CU9CORP_O_TABLE a
left join GROUP_MASTER_O_TABLE b on a.GROUP_ID =b.group_id
left join (select value ,LOCALETEXT from CRMUSER.CATEGORIES a,CRMUSER.CATEGORY_LANG b where CATEGORYTYPE ='CIFGROUP_TYPE' and a.categoryid=b.categoryid and a.bank_id='01') c on trim(GROUP_TYPE) = trim(c.value);

--LIMIT LINKAGE

select * from LIMIT_LINKAGE_TO_ACCT_O_TABLE;